{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { actionCreator } from \"../store/page/page.meta\";\nimport { call, put } from \"redux-saga/effects\";\nexport function sagaErrorWrapper(executor, customErrorHandling) {\n  return _regeneratorRuntime.mark(function _callee(action) {\n    var message, status, errorMessage;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return put(actionCreator.setLoading(true));\n\n          case 3:\n            _context.next = 5;\n            return executor(action);\n\n          case 5:\n            _context.next = 24;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0, \"sagaError\");\n            message = _context.t0.message, status = _context.t0.status;\n\n            if (!customErrorHandling) {\n              _context.next = 15;\n              break;\n            }\n\n            _context.next = 14;\n            return call(customErrorHandling, _context.t0);\n\n          case 14:\n            return _context.abrupt(\"return\");\n\n          case 15:\n            if (!(status === 500)) {\n              _context.next = 23;\n              break;\n            }\n\n            errorMessage = parseError(message);\n\n            if (!(errorMessage === errorMessages.TOKEN_EXPIRE || errorMessage === errorMessages.SESSION_EXPIRE)) {\n              _context.next = 21;\n              break;\n            }\n\n            _context.next = 20;\n            return call(refreshToken);\n\n          case 20:\n            return _context.abrupt(\"return\");\n\n          case 21:\n            notification.error({\n              message: errorMessage\n            });\n            return _context.abrupt(\"return\");\n\n          case 23:\n            notification.error({\n              message: errorMessages[\"DEFAULT\"]\n            });\n\n          case 24:\n            _context.prev = 24;\n            _context.next = 27;\n            return put(actionCreator.setLoading(false));\n\n          case 27:\n            return _context.finish(24);\n\n          case 28:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 7, 24, 28]]);\n  });\n}","map":{"version":3,"sources":["/home/nhathuynh/subject-mobile/MobileApp/utils/error.js"],"names":["actionCreator","call","put","sagaErrorWrapper","executor","customErrorHandling","action","setLoading","console","log","message","status","errorMessage","parseError","errorMessages","TOKEN_EXPIRE","SESSION_EXPIRE","refreshToken","notification","error"],"mappings":";AAAA,SAASA,aAAT;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AAEA,OAAO,SAASC,gBAAT,CAA0BC,QAA1B,EAAoCC,mBAApC,EAAyD;AAC9D,kCAAO,iBAAWC,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEH,mBAAMJ,GAAG,CAACF,aAAa,CAACO,UAAd,CAAyB,IAAzB,CAAD,CAAT;;AAFG;AAAA;AAGH,mBAAMH,QAAQ,CAACE,MAAD,CAAd;;AAHG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAKHE,YAAAA,OAAO,CAACC,GAAR,cAAmB,WAAnB;AACQC,YAAAA,OANL,eAMKA,OANL,EAMcC,MANd,eAMcA,MANd;;AAAA,iBAOCN,mBAPD;AAAA;AAAA;AAAA;;AAAA;AAQD,mBAAMJ,IAAI,CAACI,mBAAD,cAAV;;AARC;AAAA;;AAAA;AAAA,kBAYCM,MAAM,KAAK,GAZZ;AAAA;AAAA;AAAA;;AAaKC,YAAAA,YAbL,GAaoBC,UAAU,CAACH,OAAD,CAb9B;;AAAA,kBAgBCE,YAAY,KAAKE,aAAa,CAACC,YAA/B,IACAH,YAAY,KAAKE,aAAa,CAACE,cAjBhC;AAAA;AAAA;AAAA;;AAAA;AAoBC,mBAAMf,IAAI,CAACgB,YAAD,CAAV;;AApBD;AAAA;;AAAA;AAuBDC,YAAAA,YAAY,CAACC,KAAb,CAAmB;AACjBT,cAAAA,OAAO,EAAEE;AADQ,aAAnB;AAvBC;;AAAA;AA6BHM,YAAAA,YAAY,CAACC,KAAb,CAAmB;AACjBT,cAAAA,OAAO,EAAEI,aAAa,CAAC,SAAD;AADL,aAAnB;;AA7BG;AAAA;AAAA;AAiCH,mBAAMZ,GAAG,CAACF,aAAa,CAACO,UAAd,CAAyB,KAAzB,CAAD,CAAT;;AAjCG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAoCD","sourcesContent":["import { actionCreator } from \"../store/page/page.meta\";\nimport { call, put } from \"redux-saga/effects\";\n\nexport function sagaErrorWrapper(executor, customErrorHandling) {\n  return function* (action) {\n    try {\n      yield put(actionCreator.setLoading(true));\n      yield executor(action);\n    } catch (error) {\n      console.log(error, \"sagaError\");\n      const { message, status } = error;\n      if (customErrorHandling) {\n        yield call(customErrorHandling, error);\n        return;\n      }\n\n      if (status === 500) {\n        const errorMessage = parseError(message);\n\n        if (\n          errorMessage === errorMessages.TOKEN_EXPIRE ||\n          errorMessage === errorMessages.SESSION_EXPIRE\n        ) {\n          // session expired, get new token from refresh token\n          yield call(refreshToken);\n          return;\n        }\n        notification.error({\n          message: errorMessage,\n        });\n\n        return;\n      }\n      notification.error({\n        message: errorMessages[\"DEFAULT\"],\n      });\n    } finally {\n      yield put(actionCreator.setLoading(false));\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}