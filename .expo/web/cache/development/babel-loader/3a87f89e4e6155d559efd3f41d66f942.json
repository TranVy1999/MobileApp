{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = _regeneratorRuntime.mark(sagaGetNews),\n    _marked2 = _regeneratorRuntime.mark(newsMonitor);\n\nimport { takeLatest, put, call, all } from \"redux-saga/effects\";\nimport { getNews } from \"../../api/apiRouter\";\nimport { sagaErrorWrapper } from \"../../utils/error\";\nimport { types, actionCreators } from \"./news.meta\";\n\nfunction sagaGetNews(action) {\n  var _yield$call, body, httpStatus;\n\n  return _regeneratorRuntime.wrap(function sagaGetNews$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return call(getNews);\n\n        case 2:\n          _yield$call = _context.sent;\n          body = _yield$call.body;\n          httpStatus = _yield$call.httpStatus;\n\n          if (!(httpStatus === 200)) {\n            _context.next = 8;\n            break;\n          }\n\n          _context.next = 8;\n          return put(actionCreators.actFetchNewsSuccess(body));\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction newsMonitor() {\n  return _regeneratorRuntime.wrap(function newsMonitor$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return all([takeLatest(types.FETCH_NEWS, sagaErrorWrapper(sagaGetNews))]);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default newsMonitor;","map":{"version":3,"sources":["/home/nhathuynh/subject-mobile/MobileApp/store/news/news.saga.js"],"names":["sagaGetNews","newsMonitor","takeLatest","put","call","all","getNews","sagaErrorWrapper","types","actionCreators","action","body","httpStatus","actFetchNewsSuccess","FETCH_NEWS"],"mappings":";;uCAMUA,W;wCAiBAC,W;;AAvBV,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,SAASC,OAAT;AAEA,SAASC,gBAAT;AACA,SAASC,KAAT,EAAgBC,cAAhB;;AAEA,SAAUT,WAAV,CAAsBU,MAAtB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAC+B,iBAAMN,IAAI,CAACE,OAAD,CAAV;;AAD/B;AAAA;AACUK,UAAAA,IADV,eACUA,IADV;AACgBC,UAAAA,UADhB,eACgBA,UADhB;;AAAA,gBAEMA,UAAU,KAAK,GAFrB;AAAA;AAAA;AAAA;;AAAA;AAII,iBAAMT,GAAG,CAACM,cAAc,CAACI,mBAAf,CAAmCF,IAAnC,CAAD,CAAT;;AAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUV,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMI,GAAG,CAAC,CAERH,UAAU,CAACM,KAAK,CAACM,UAAP,EAAmBP,gBAAgB,CAACP,WAAD,CAAnC,CAFF,CAAD,CAAT;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWA,eAAeC,WAAf","sourcesContent":["import { takeLatest, put, call, all } from \"redux-saga/effects\";\nimport { getNews } from \"../../api/apiRouter\";\n\nimport { sagaErrorWrapper } from \"../../utils/error\";\nimport { types, actionCreators } from \"./news.meta\";\n  //5\nfunction* sagaGetNews(action) {\n  const { body, httpStatus } = yield call(getNews);\n  if (httpStatus === 200) {\n      //7\n    yield put(actionCreators.actFetchNewsSuccess(body));\n  }\n}\n\n// function* sagaFetchMangaById(action) {\n//   const { id } = action.payload;\n//   const { body, httpStatus } = yield call(getMangaById, id);\n//   if (httpStatus === 200) {\n//     yield put(actionCreators.actFetchMangaByIdSuccess(body));\n//   }\n// }\n\n// Monitoring Sagas\nfunction* newsMonitor() {\n  yield all([\n        //4\n    takeLatest(types.FETCH_NEWS, sagaErrorWrapper(sagaGetNews)),\n    // takeLatest(\n    //   types.FETCH_PRODUCT_BY_ID,\n    //   sagaErrorWrapper(sagaFetchProductById)\n    // ),\n  ]);\n}\n\nexport default newsMonitor;\n"]},"metadata":{},"sourceType":"module"}